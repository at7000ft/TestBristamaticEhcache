package com.baristamatic.domain;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Map;

 

/**
 * <p>
 * Title: Drink
 * </p>
 * <p>
 * Description: An Active Record Domain Model encapsulating DAO/EntityManager functionality
 * and population/maintaining the Drink.
 * 
 * Morphia uses Java annotations to describe how to persist objects in the database. The following annotations are available:

@Id - marks the MongoDB id field to be autogenerated
@Entity - marks the class to be persisted as an object and optionally the collection
@Embedded - tells Morphia to embed this object in another
@Reference - analogous to MongoDB DBRef
@Indexed - prepare an index for this property
@Serialized - store as BSON
@Property - indicates that the property name in MongoDB will be different than in the object
@Transient - doesn't persist the property

 *  Store money as cents (if U.S. currency) and use the long int datatype.
 * </p>
 * <p>
 * Oct 17, 2012
 * </p>
 * .
 * 
 * @author RGH
 */
 
public class Drink implements Serializable{
  
   private int number;
   private String name;
   private String displayName;
   private Map<String, Integer> recipe;
   private long cost;  //In cents
 
   private BigDecimal displayCost; //In dollars
   private boolean inStock;
 
   /**
    * 
    */
   private Drink() {
      super();
   }

   /**
    * Instantiates a new drink.
    * 
    * @param number the number
    * @param name the name
    * @param displayName the display name
    * @param recipe the recipe
    */
   public Drink(int number, String name, String displayName, Map<String, Integer> recipe) {
      super();
      this.number = number;
      this.name = name;
      this.displayName = displayName;
      this.recipe = recipe;
   }

 

   /**
    * Gets the number.
    * 
    * @return the number
    */
   public int getNumber() {
      return number;
   }

   /**
    * Sets the number.
    * 
    * @param number the new number
    */
   public void setNumber(int number) {
      this.number = number;
   }

   /**
    * Gets the name.
    * 
    * @return the name
    */
   public String getName() {
      return name;
   }

   /**
    * Sets the name.
    * 
    * @param name the new name
    */
   public void setName(String name) {
      this.name = name;
   }

   /**
    * Gets the display name.
    * 
    * @return the displayName
    */
   public String getDisplayName() {
      return displayName;
   }

   /**
    * Sets the display name.
    * 
    * @param displayName the new display name
    */
   public void setDisplayName(String displayName) {
      this.displayName = displayName;
   }

   /**
    * Gets the recipe.
    * 
    * @return the recipe
    */
   public Map<String, Integer> getRecipe() {
      return recipe;
   }

   /**
    * Sets the recipe.
    * 
    * @param recipe the recipe
    */
   public void setRecipe(Map<String, Integer> recipe) {
      this.recipe = recipe;
   }

   /**
    * Checks if is in stock.
    * 
    * @return the inStock
    */
   public boolean isInStock() {
      return inStock;
   }

   /**
    * Sets the in stock.
    * 
    * @param inStock the new in stock
    */
   public void setInStock(boolean inStock) {
      this.inStock = inStock;
   }

 
 

   /**
    * @return the displayCost
    */
   public BigDecimal getDisplayCost() {
      return displayCost;
   }

   /**
    * @param Set displayCost  
    */
   public void setDisplayCost(BigDecimal displayCost) {
      this.displayCost = displayCost;
   }

   /**
    * @return the cost
    */
   public long getCost() {
      return cost;
   }

   /**
    * @param Set cost  
    */
   public void setCost(long cost) {
      this.cost = cost;
   }

   /*
    * @see java.lang.Object#toString()
    */
   public String toString() {
      return "Drink [number=" + number + ", name=" + name + ", displayName=" + displayName + ", recipe=" + recipe + ", cost=" + cost
               + ", inStock=" + inStock + "]";
   }
}
